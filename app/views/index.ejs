<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>CodePen - Twitter layout html css</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/5.0.0/normalize.min.css">
    <link rel='stylesheet' href='//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css'>
    <link rel='stylesheet' href='/css/style.css'>
    <link rel='stylesheet' href='/css/receipt.css'>
    <link rel='stylesheet' href='/css/button-image.css'>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script src="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js"></script>

    <script src="https://www.chartjs.org/dist/2.8.0/Chart.min.js"></script>

    <script>
        var randomScalingFactor = function () {
            return Math.round(Math.random() * 120 + 20);
        };
        window.addEventListener('load', () => window.resizeTo(1, 1));
    </script>
</head>

<body translate="no">
    <div class="navbar navbar-default navbar-static-top">
        <div class="container">
            <div class="navbar-collapse navbar-collapse-1 collapse" aria-expanded="true">
                <ul class="nav navbar-nav">
                    <li class="active">
                        <a href="/"><span class="glyphicon glyphicon-home"></span> Home</a>
                    </li>
                    <li>
                        <a href="#fake" onclick="fakseSettings()" data-toggle="modal" data-target="#myModal"><span
                                class="glyphicon glyphicon-stats"></span> Settings</a>
                    </li>
                    <li>
                        <a href="stats"><span class="glyphicon glyphicon-signal"></span> Stats</a>
                    </li>
                    <li>
                        <a onclick="displayReceipts()" href="#receipts" data-toggle="modal" data-target="#myModal"><span
                                class="glyphicon glyphicon-list-alt"></span> Receipts</a>
                    </li>
                </ul>

            </div>
        </div>
    </div>
    <div class="container">
        <div class="row">

            <div class="col-md-3">
                <div class="panel panel-default">
                    <div class="panel-heading">Welcome back xox!</div>
                    <div class="panel-body">
                        <a href="#">
                            <img class="img-responsive" alt="" src="myAvatar.png">
                        </a>
                    </div>
                </div>
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Your summary
                    </div>
                    <div class="panel-body square-pie">
                        <canvas id="stat1"></canvas>
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        Last months expenses
                    </div>
                    <div class="panel-body">
                        <canvas id="stat2"></canvas>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Top Five
                        </div>
                        <div class="panel-body" id="topFive">

                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="panel panel-default">
                        <div class="panel-heading">
                            Something2
                        </div>
                        <div class="panel-body" id="saveTree">
                            
                        </div>
                    </div>
                </div>
            </div>


            <div class="col-md-3">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <div class="has-feedback custom-search">
                            <input type="text" class="form-group" id="search" aria-describedby="search1">
                            <span class="glyphicon glyphicon-search search-icon" aria-hidden="true"></span>
                            <a href='#fake' onclick="makeFull()"><span
                                    class="glyphicon glyphicon-fullscreen fullscreen-icon" data-toggle="modal"
                                    data-target="#myModal"></span></a>
                        </div>

                    </div>
                    <div class="panel-body listReceipts" id="receiptsList">

                    </div>
                </div>

                <div class="panel panel-default hidden" id='searchStats'>

                </div>


            </div>
        </div>
    </div>




    <div class="modal fade" id="myModal" tabindex=-1 role="dialog">
        <div class="modal-dialog custom-modal" role="document">
            <div class="">
                <div id="modalBody" class="col-md-12">
                    DYNAMIC CONTENT HERE
                </div>
            </div>
        </div>
    </div>

    <a id="buttonAdd" href="/upload">
        <span class="glyphicon glyphicon-plus my-float"></span>
    </a>

    <script src="/scripts/example_receipt.js"></script>
    <script src="/scripts/charts/summary_pie.js"></script>
    <script src="/scripts/charts/summary_bar.js"></script>
    <!-- <script src="example_bar.js"></script> -->
    <script src="/scripts/charts/last_months.js"></script>

    <script>
        // var lastOffset = 0;
        // var currentActive = 0;
        // var offset = 0;
        // function WheelHandler(e) {
        //     let height0 = parseFloat(receiptsList.children[currentActive].clientHeight);
        //     let height1 = parseFloat(receiptsList.children[currentActive+1].clientHeight);

        //     console.log(currentActive);
        //     console.log(height1, e.y)
        //     if(currentActive < 0) return;
        //     if(currentActive >= receiptsList.children.length+1) return;

        //     if(height0 <= 30){
        //         currentActive++; 
        //     }
        //     if(height0 >= 600){
        //         currentActive--; 
        //     }
        //     offset += e.deltaY;
        //     let change = offset - lastOffset;
        //     // console.log(e.y);
        //     if(Math.abs(change) > 0.001){
        //         let c = change < 0? -20 : 20;
        //         receiptsList.children[currentActive].style.height = (height0 - c) + 'px';
        //         // if()
        //         receiptsList.children[currentActive+1].style.height = (height1 + c) + 'px';
        //         lastOffset = offset;
        //     }
        //     // console.log(e.offsetY)
        // }

        var RECEIPTS = {}

        function getFormattedDate(unix) {
            var date = new Date();
            date.setTime(unix * 1000);
            var month = date.getMonth() + 1;
            var day = date.getDate();
            var hour = date.getHours();
            var min = date.getMinutes();
            var sec = date.getSeconds();

            month = (month < 10 ? "0" : "") + month;
            day = (day < 10 ? "0" : "") + day;
            hour = (hour < 10 ? "0" : "") + hour;
            min = (min < 10 ? "0" : "") + min;
            sec = (sec < 10 ? "0" : "") + sec;

            var str = date.getFullYear() + "-" + month + "-" + day + "<br>" + hour + ":" + min + ":" + sec;

            /*alert(str);*/

            return str;
        }

        async function displayReceipts() {
            let receipts = createReceiptList(RECEIPTS);
            modalBody.innerHTML = '<div class="gridReceipts">' + receipts + '</div>';
        }

        window.onload = async function () {
            let o = await (await fetch('/receipts.json')).text()
            RECEIPTS = JSON.parse(o);
            receiptsList.innerHTML = createReceiptList(RECEIPTS);
            treesToSave = 6-(RECEIPTS.length % 6);
            saveTree.innerHTML = `
            <p>To save another tree you need <span class=result>${treesToSave}</span> more receipts.</p>
            <div class="progress">
                <div class="progress-bar" role="progressbar" style="width: 25%;" aria-valuenow="${1}" aria-valuemin="0" aria-valuemax="100">${Math.floor((1-treesToSave/6)*100)}</div>
            </div>
            `;




            processData();
            // receiptsList.children.forEach(e=>e.classList.add('active'));
            // receiptsList.onmousewheel = WheelHandler;

            // var ctx_pie = document.getElementById('stat1').getContext('2d');
            let totals = null;
            let t_req = new XMLHttpRequest();
            t_req.open('get', '/totals');
            t_req.onreadystatechange = function() {
                if (t_req.readyState == XMLHttpRequest.DONE) {
                    totals = JSON.parse(t_req.responseText);
                    let chart_data = [];
                    let chart_labels = [];
                    for (cat in totals.user) {
                        chart_data.push(totals.user[cat].price);
                        chart_labels.push(cat);
                    }
                    let ctx_bar = document.getElementById('stat1').getContext('2d');
                    let summary_pie = f_summary_pie(chart_data, chart_labels);
                    window.summaryPie = new Chart(ctx_bar, summary_pie);
                }
            }
            t_req.send();
            // window.myPie = new Chart(ctx_pie, f_summary_pie([50, 10, 20, 20, 20, 30], [
            //     'Food',
            //     'Health',
            //     'Travel',
            //     'Entertainment',
            //     'Alcohol',
            //     'Clothing'
            // ]));
            let monthTotals = null;
            let m_req = new XMLHttpRequest();
            m_req.open('get', '/month_totals?n=4');
            m_req.onreadystatechange = function() {
                if (m_req.readyState == XMLHttpRequest.DONE) {
                    totals = JSON.parse(m_req.responseText);
                    let chart_data = [];
                    let chart_labels = [];
                    for (let i = 0; i < 4; i++) {
                        chart_data.push(totals.user[i].price);
                        chart_labels.push(totals.user[i].start);
                    }
                    let ctx_bar = document.getElementById('stat2').getContext('2d');
                    let summary_spending = f_last_months(chart_data, chart_labels);
                    window.myPie2 = new Chart(ctx_bar, summary_spending);
                }
            }
            m_req.send();
            // var ctx_bar = document.getElementById('stat2').getContext('2d');
            // window.myPie2 = new Chart(ctx_bar, f_last_months([1500, 1300, 1700, 800]));
        };

        async function processData() {
            let dict1 = new Map(), dict2 = new Map()
            let spent = 0;
            let sum = 0;

            for (let el of RECEIPTS) {
                if (dict1.has(el.shop)) dict1.set(el.shop, dict1.get(el.shop) + 1)
                else dict1.set(el.shop, 0);
                sum += el.total;
                if ((new Date()).getYear() == (new Date(el.date * 1000).getYear()) && (new Date()).getMonth() == (new Date(el.date * 1000).getMonth())) {
                    spent += el.total;
                }
                for (let p of el.products) {
                    let name = p.name.split(' ')[0]
                    let price = p.price
                    if (dict2.has(name)) dict2.set(name, dict2.get(name) + price)
                    else dict2.set(name, price);
                }
            }

            let bestShop = ['', 0]
            for (let [key, value] of dict1.entries()) {
                if (value > bestShop[1]) {
                    bestShop = [key, value]
                }
            }

            let bestItem = ['', 0]
            for (let [key, value] of dict2.entries()) {
                if (value > bestItem[1]) {
                    bestItem = [key, value]
                }
            }

            let avg = (sum / RECEIPTS.length).toFixed(2);
            let top_five = TOP_FIVE_TEMPLATE.replace('@SPENT_ON_ITEM@', bestItem[1].toFixed(2)).replace('@ITEM@', bestItem[0]).replace('@SPENT_SO_FAR@', spent.toFixed(2)).replace('@SHOP@', bestShop[0]).replace('@SHOP_TIMES@', bestShop[1]).replace('@AVG_MONTH@', avg);
            topFive.innerHTML = top_five;
        }

        function makeFull() {
            modalBody.innerHTML = '<div class="gridReceipts">' + receiptsList.innerHTML + '</div>';
        }

        function fakseSettings() {
            modalBody.innerHTML = 'Coming soon';
        }


        function createReceiptList(o) {
            let receipts = "";
            let str = search.value.toLowerCase() || '$$$$';
            for (let el of o) {
                let header = RECEIPT_TEMPLATE_HEADER.replace('@SHOP@', el.shop + `<br><span class="total-price">\$${el.total.toFixed(2)}</span>`).replace('@DATE@', getFormattedDate(el.date));
                let prices = "";
                for (let p of el.products) {
                    let highlight = '';
                    if (p.name.toLowerCase().startsWith(str)) {
                        highlight = 'highlight';
                    }
                    prices += RECEIPT_TEMPLATE_PRICE.replace('@PRODUCT@', p.name).replace('@QUANTITY@', p.quantity).replace('@PRICE@', p.price.toFixed(2)).replace('@HIGHLIGHT@', highlight);
                }
                let body = RECEIPT_TEMPLATE_BODY.replace('@PRICES@', prices);
                let receipt = header.replace('@BODY@', body);
                // console.log(receipt);
                receipts += receipt;
            }
            return receipts;
        }

        async function displayStats(name) {
            searchStats.classList.remove('hidden');
            let data = await (await fetch('/product_stats?product='+name)).text();
            let json =  JSON.parse(data);
            console.log(json);
            let stats = SEARCH_STATS_TEMPLATE.replace(/@NAME@/g, name).replace('@ITEM_AVG@', json.user.avg.toFixed(2)).replace('@FRIENDS_AVG@', json.friends.avg.toFixed(2)).replace('@LOCAL_AVG@', json.global.avg.toFixed(2)).replace('@SPENT_ON_ITEM@', json.user.price.toFixed(2)).replace('@CLOSEST_SHOP@', json.shop);
            searchStats.innerHTML = stats;
        }

        search.oninput = function (e) {
            let str = search.value;
            if (!str) {
                searchStats.classList.add('hidden');
                return;
            }
            displayStats(search.value);
            let o = [];
            for (let el of RECEIPTS) {
                for (let p of el.products) {
                    if (p.name.toLowerCase().startsWith(str)) o.push(el)
                }
            }
            receiptsList.innerHTML = createReceiptList(o);
            
        }

    </script>


</body>

</html>